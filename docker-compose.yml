# docker-compose.yml
#version: '3.8'

services:
  # Servi√ßo principal de an√°lise com uv para instala√ß√£o r√°pida
  analysis:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - USE_UV=true  # Usar uv para instala√ß√£o mais r√°pida
    container_name: sast-llm-analysis
    volumes:
      - ./dataset:/app/dataset:ro
      - ./scripts:/app/scripts:ro
      - ./results:/app/results
      - ollama_models:/root/.ollama
    environment:
      - DEEPSEEK_VERSION=deepseek-coder:1.3b
      - CODELLAMA_VERSION=codellama:7b
      - OLLAMA_HOST=0.0.0.0:11434
      - PYTHONPATH=/app
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_TOKEN=squ_admin_token_placeholder
    ports:
      - "11434:11434"  # Ollama API
    command: >
      bash -c "
        echo 'üöÄ Iniciando ambiente SAST vs LLM...' &&
        
        # Configurar sistema
        echo 'vm.max_map_count=262144' > /etc/sysctl.conf &&
        
        # Iniciar Ollama
        ollama serve &
        OLLAMA_PID=\$! &&
        
        # Aguardar Ollama
        echo '‚è≥ Aguardando Ollama...' &&
        for i in {1..60}; do
          if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            echo '‚úÖ Ollama pronto!' && break
          fi
          sleep 2
        done &&
        
        # Baixar modelos em paralelo
        echo 'üì• Baixando modelos LLM...' &&
        (ollama pull deepseek-coder:1.3b && echo '‚úÖ DeepSeek instalado' || echo '‚ùå Falha no DeepSeek') &
        (ollama pull codellama:7b && echo '‚úÖ CodeLlama instalado' || echo '‚ùå Falha no CodeLlama') &
        wait &&
        
        # Verificar modelos
        echo 'üìã Modelos dispon√≠veis:' &&
        ollama list &&
        
        # Teste r√°pido
        echo 'üß™ Teste r√°pido dos modelos...' &&
        timeout 30 ollama run deepseek-coder:1.3b 'print(\"DeepSeek OK\")' || echo '‚ö†Ô∏è DeepSeek timeout' &&
        timeout 30 ollama run codellama:7b 'print(\"CodeLlama OK\")' || echo '‚ö†Ô∏è CodeLlama timeout' &&
        
        echo 'üéâ Ambiente pronto! Execute: make test-minimal' &&
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
    mem_limit: 8g
    cpus: '4.0'
    restart: unless-stopped

  # SonarQube com configura√ß√£o pr√©-definida
  sonarqube:
    image: sonarqube:10.3.0-community
    container_name: sast-llm-sonarqube
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_WEB_JAVAADDITIONALOPTS=-Dsonar.web.systemPasscode=admin
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 15
    mem_limit: 3g
    restart: unless-stopped

  # PostgreSQL otimizado para SonarQube
  postgres:
    image: postgres:15-alpine
    container_name: sast-llm-postgres
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 1g
    restart: unless-stopped

  # Semgrep com an√°lise autom√°tica
  semgrep:
    image: semgrep/semgrep:1.49.0
    container_name: sast-llm-semgrep
    volumes:
      - ./dataset:/src:ro
      - ./results:/results
    working_dir: /src
    command: >
      bash -c "
        echo 'üü¢ Preparando an√°lise Semgrep...' &&
        mkdir -p /results &&
        echo 'üîç Executando an√°lise Semgrep...' &&
        semgrep --config=auto code_snippets/ --json --output=/results/semgrep_results.json &&
        semgrep --config=auto code_snippets/ --sarif --output=/results/semgrep_results.sarif &&
        echo '‚úÖ An√°lise Semgrep conclu√≠da!' &&
        echo 'Resultados em: /results/semgrep_results.json' &&
        tail -f /dev/null
      "
    depends_on:
      - analysis
    restart: unless-stopped

  # Inicializador autom√°tico que configura SonarQube
  sonarqube-init:
    image: curlimages/curl:8.4.0
    container_name: sast-llm-sonar-init
    depends_on:
      sonarqube:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üîß Configurando SonarQube...' &&
        
        # Aguardar SonarQube estar totalmente pronto
        sleep 30 &&
        
        # Criar token de an√°lise
        curl -u admin:admin -X POST 'http://sonarqube:9000/api/user_tokens/generate' \
          -d 'name=analysis-token' || echo 'Token j√° existe' &&
        
        # Criar projeto
        curl -u admin:admin -X POST 'http://sonarqube:9000/api/projects/create' \
          -d 'project=juice-shop-analysis' \
          -d 'name=OWASP Juice Shop Security Analysis' || echo 'Projeto j√° existe' &&
        
        # Configurar qualidade de c√≥digo
        curl -u admin:admin -X POST 'http://sonarqube:9000/api/qualitygates/create' \
          -d 'name=Security-Focused' || echo 'Quality Gate j√° existe' &&
        
        echo '‚úÖ SonarQube configurado!' &&
        echo 'üåê Acesse: http://localhost:9000 (admin/admin)' &&
        echo 'üìä Projeto: juice-shop-analysis'
      "
    restart: "no"

volumes:
  ollama_models:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: sast-llm-network
    driver: bridge