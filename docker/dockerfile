# docker/Dockerfile
FROM python:3.11-slim

# Argumentos de build
ARG USE_UV=true

# Metadados
LABEL maintainer="Avalia√ß√£o SAST vs LLM" \
      version="2.0" \
      description="Ambiente otimizado para an√°lise comparativa SAST vs LLM"

# Vari√°veis de ambiente
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    PATH="/root/.local/bin:$PATH"

# Instalar depend√™ncias do sistema em uma √∫nica camada
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    bc \
    unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Instalar uv para gerenciamento r√°pido de pacotes Python
RUN if [ "$USE_UV" = "true" ]; then \
        curl -LsSf https://astral.sh/uv/install.sh | sh && \
        echo "‚úÖ UV instalado para instala√ß√£o r√°pida de depend√™ncias"; \
    fi

# Instalar Ollama
RUN curl -fsSL https://ollama.com/install.sh | sh

# Criar diret√≥rio de trabalho
WORKDIR /app

# Copiar requirements primeiro (para melhor cache do Docker)
COPY scripts/requirements.txt /app/requirements.txt

# Instalar depend√™ncias Python (usando uv se dispon√≠vel)
RUN if [ "$USE_UV" = "true" ] && [ -f "/root/.local/bin/uv" ]; then \
        echo "üì¶ Instalando depend√™ncias com UV (mais r√°pido)..." && \
        /root/.local/bin/uv pip install --system -r requirements.txt; \
    else \
        echo "üì¶ Instalando depend√™ncias com PIP..." && \
        pip install --no-cache-dir -r requirements.txt; \
    fi

# Instalar Semgrep com vers√£o fixa
RUN pip install semgrep==1.49.0

# Instalar SonarScanner
RUN wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip && \
    unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip && \
    mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner && \
    ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner && \
    rm sonar-scanner-cli-4.8.0.2856-linux.zip

# Copiar todo o c√≥digo do projeto
COPY . /app/

# Dar permiss√µes execut√°veis aos scripts
RUN find scripts/ -name "*.sh" -exec chmod +x {} \; && \
    find scripts/ -name "*.py" -exec chmod +x {} \;

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/results /root/.ollama

# Script de verifica√ß√£o de sa√∫de
COPY docker/healthcheck.sh /app/healthcheck.sh
RUN chmod +x /app/healthcheck.sh

# Configurar limite de mem√≥ria virtual para Elasticsearch (SonarQube)
RUN echo 'vm.max_map_count=262144' >> /etc/sysctl.conf

# Expor portas
EXPOSE 11434 9000

# Verifica√ß√£o de sa√∫de
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Comando padr√£o
CMD ["bash", "-c", "echo 'üöÄ Container pronto. Use docker-compose para iniciar servi√ßos.'"]